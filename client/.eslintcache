[{"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\index.js":"1","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\reportWebVitals.js":"2","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\App.js":"3","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Contact.jsx":"4","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Footer.jsx":"5","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\PageNotFound.jsx":"6","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Header.jsx":"7","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\About.jsx":"8","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Home.jsx":"9","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\Payment.jsx":"10","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\ShoppingCart.jsx":"11","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\Blog.jsx":"12","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\ArticlePage.jsx":"13","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\ProductPage.jsx":"14","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\Store.jsx":"15","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\firebase.js":"16","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\context\\AuthContext.js":"17","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\WebsiteAdmin.js":"18","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\AlertBox.jsx":"19","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\CartProduct.jsx":"20","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\data\\images.js":"21","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\OrderSummary.jsx":"22","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\Product.jsx":"23","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\SignUp.jsx":"24","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\ForgotPassword.jsx":"25","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\ChangePassword.jsx":"26","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\Login.jsx":"27","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\PrivateRoute.jsx":"28","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\Profile.jsx":"29","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\Article.jsx":"30","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\PayPalBtn.jsx":"31","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\ArticleComment.jsx":"32","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\users.js":"33","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\posts.js":"34","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\products.js":"35","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\context\\CartContext.js":"36"},{"size":506,"mtime":1614283490155,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":3363,"mtime":1615463900307,"results":"40","hashOfConfig":"38"},{"size":6007,"mtime":1615306384585,"results":"41","hashOfConfig":"38"},{"size":928,"mtime":1614151296136,"results":"42","hashOfConfig":"38"},{"size":298,"mtime":1614151396950,"results":"43","hashOfConfig":"38"},{"size":8013,"mtime":1615461233382,"results":"44","hashOfConfig":"38"},{"size":3277,"mtime":1615305843598,"results":"45","hashOfConfig":"38"},{"size":5705,"mtime":1615306671832,"results":"46","hashOfConfig":"38"},{"size":20334,"mtime":1615459748474,"results":"47","hashOfConfig":"38"},{"size":1386,"mtime":1615461400355,"results":"48","hashOfConfig":"38"},{"size":1455,"mtime":1615125671694,"results":"49","hashOfConfig":"38"},{"size":6541,"mtime":1615216473231,"results":"50","hashOfConfig":"38"},{"size":5883,"mtime":1615463078605,"results":"51","hashOfConfig":"38"},{"size":11532,"mtime":1615366777961,"results":"52","hashOfConfig":"38"},{"size":861,"mtime":1614974588146,"results":"53","hashOfConfig":"38"},{"size":2580,"mtime":1615362540426,"results":"54","hashOfConfig":"38"},{"size":1000,"mtime":1615062795375,"results":"55","hashOfConfig":"38"},{"size":512,"mtime":1615463099768,"results":"56","hashOfConfig":"38"},{"size":2796,"mtime":1615461855668,"results":"57","hashOfConfig":"38"},{"size":1991,"mtime":1614629716976,"results":"58","hashOfConfig":"38"},{"size":4014,"mtime":1615461365452,"results":"59","hashOfConfig":"38"},{"size":1420,"mtime":1615316970049,"results":"60","hashOfConfig":"38"},{"size":4582,"mtime":1615049493342,"results":"61","hashOfConfig":"38"},{"size":2450,"mtime":1614288576753,"results":"62","hashOfConfig":"38"},{"size":2807,"mtime":1615216034213,"results":"63","hashOfConfig":"38"},{"size":3162,"mtime":1615362306515,"results":"64","hashOfConfig":"38"},{"size":475,"mtime":1615362314334,"results":"65","hashOfConfig":"38"},{"size":7408,"mtime":1615123475983,"results":"66","hashOfConfig":"38"},{"size":1034,"mtime":1614467747717,"results":"67","hashOfConfig":"38"},{"size":605,"mtime":1614468362756,"results":"68","hashOfConfig":"38"},{"size":361,"mtime":1614467703399,"results":"69","hashOfConfig":"38"},{"size":2895,"mtime":1615049056748,"results":"70","hashOfConfig":"38"},{"size":1901,"mtime":1614707846784,"results":"71","hashOfConfig":"38"},{"size":3724,"mtime":1615062905040,"results":"72","hashOfConfig":"38"},{"size":3699,"mtime":1615463068886,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1oimovx",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"76"},"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\index.js",[],["158","159"],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\reportWebVitals.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\App.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Contact.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Footer.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\PageNotFound.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Header.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\About.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\Home.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\Payment.jsx",["160"],"import React, { useRef, useState } from 'react';\r\nimport {Button, Collapse } from 'react-bootstrap';\r\nimport '../../css/payment.css';\r\nimport OrderSummary from './OrderSummary.jsx';\r\nimport 'bootstrap/js/dist/collapse';\r\nimport PayPalBtn from './PayPalBtn'\r\nimport { useCart } from '../../context/CartContext';\r\n\r\n\r\nexport default function Payment() {\r\n    const { tax, getSubTotalAmount } = useCart();\r\n\r\n    const [openCostumerDetails, setOpenCostumerDetails] = useState(false);\r\n    const [openRecipientDetails, setOpenRecipientDetails] = useState(false);\r\n    const [openPaymentDetails, setOpenPaymentDetails] = useState(false);\r\n    \r\n    const costumerDetailsRef = useRef();\r\n    const recipientDetails = useRef();\r\n    const fullNameRef = useRef();\r\n    const phoneRef = useRef();\r\n    const emailRef = useRef();\r\n    const firstNameRef = useRef();\r\n    const lastNameRef = useRef();\r\n    const streetRef = useRef();\r\n    const homeNumberRef = useRef();\r\n    const apartmentNumberRef = useRef();\r\n    const selectDelivery = useRef();\r\n    const cityRef = useRef();\r\n    \r\n    const [deliveryAmount, setDeliveryAmount] = useState(0);\r\n    const [messageFullName, setMessageFullName] = useState('');\r\n    const [messagePhone, setMessagePhone] = useState('');\r\n    const [messageEmail, setMessageEmail] = useState('');\r\n    const [messageFirstName, setMessageFirstName] = useState('');\r\n    const [messageLastName, setMessageLastName] = useState('');\r\n    const [messageStreet, setMessageStreet] = useState('');\r\n    const [messageHomeNumber, setMessageHomeNumber] = useState('');\r\n    const [messageApartmentNumber, setMessageApartmentNumber] = useState('');\r\n    const [messageCity, setMessageCity] = useState('');\r\n\r\n\r\n    const calculateDelivery = () => {\r\n        let totalAmount = getSubTotalAmount();\r\n        if (totalAmount < 50){\r\n            return 50;\r\n        }\r\n        else if (totalAmount >= 50 && totalAmount < 125){\r\n            return 75;\r\n        }\r\n        else if (totalAmount >= 125 && totalAmount < 200){\r\n            return 100;\r\n        }\r\n        else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    const onChangeDelivery = () => {\r\n        switch (selectDelivery.current.value){\r\n            case 'Self-pickup':\r\n                setDeliveryAmount(0);\r\n                break;\r\n            case 'Postal-service':\r\n                setDeliveryAmount(10);\r\n                break;\r\n            case 'Registered-mail':\r\n                setDeliveryAmount(30);\r\n                break;\r\n            case 'emissary':\r\n                const deliveryAmount = calculateDelivery();\r\n                setDeliveryAmount(deliveryAmount);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    const getMyCoupon = () => {\r\n        let myCoupon = JSON.parse(localStorage.getItem('myCoupon'));\r\n        if (myCoupon === null)\r\n        myCoupon = {code: '', discount: 0};\r\n        return myCoupon;\r\n    }\r\n\r\n    const getTotalAmountAfterDelivery = () => {\r\n        let myCoupon = getMyCoupon();\r\n        return (getSubTotalAmount() * (1 + tax)) * (1 - myCoupon.discount) + deliveryAmount;\r\n    }\r\n\r\n    const submitCostumerDetails = (event) => {\r\n        event.preventDefault();\r\n\r\n        const invalidMessages= {required: \"This field is required\", \r\n                                emailPattern: \"Please provide a valid email\",\r\n                                phonePattern: \"Please provide a valid phone number\"                           \r\n                                };\r\n        const phonePattrern = /^0\\d{2}-?\\d{3}-?\\d{4}/;\r\n        const emailPattern = /^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/;\r\n        let correctInputs = true;\r\n\r\n        if (fullNameRef.current.validity.valueMissing){\r\n            fullNameRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageFullName(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageFullName('');\r\n            fullNameRef.current.style.borderColor = 'green';\r\n        }\r\n        \r\n        if (phoneRef.current.validity.valueMissing) {\r\n            phoneRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessagePhone(invalidMessages.required);\r\n        }\r\n        else if (!phoneRef.current.value.match(phonePattrern)){\r\n            phoneRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessagePhone(invalidMessages.phonePattern);\r\n        }\r\n        else {\r\n            setMessagePhone('');\r\n            phoneRef.current.style.borderColor = 'green';\r\n        }\r\n        \r\n        if (!emailRef.current.value){\r\n            emailRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageEmail(invalidMessages.required);\r\n        } \r\n        else if (!emailRef.current.value.match(emailPattern)){\r\n            emailRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageEmail(invalidMessages.emailPattern);\r\n        }\r\n        else {\r\n            setMessageEmail('');\r\n            emailRef.current.style.borderColor = 'green';\r\n        }\r\n        \r\n        if (correctInputs){\r\n            setOpenCostumerDetails(false);\r\n            setOpenRecipientDetails(true);\r\n        }  \r\n    }\r\n\r\n    const submitRecipientDetails = (event) => {\r\n        event.preventDefault();\r\n\r\n        const invalidMessages= {required: \"This field is required\", \r\n                                emailPattern: \"Please provide a valid email\",\r\n                                phonePattern: \"Please provide a valid phone number\"                           \r\n                                };\r\n        let correctInputs = true;\r\n        \r\n        if (firstNameRef.current.validity.valueMissing){\r\n            firstNameRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageFirstName(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageFirstName('');\r\n            firstNameRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (lastNameRef.current.validity.valueMissing){\r\n            lastNameRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageLastName(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageLastName('');\r\n            lastNameRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (streetRef.current.validity.valueMissing){\r\n            streetRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageStreet(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageStreet('');\r\n            streetRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (homeNumberRef.current.validity.valueMissing){\r\n            homeNumberRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageHomeNumber(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageHomeNumber('');\r\n            homeNumberRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (apartmentNumberRef.current.validity.valueMissing){\r\n            apartmentNumberRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageApartmentNumber(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageApartmentNumber('');\r\n            apartmentNumberRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (cityRef.current.validity.valueMissing){\r\n            cityRef.current.style.borderColor = 'red';\r\n            correctInputs = false;\r\n            setMessageCity(invalidMessages.required);\r\n        }\r\n        else{\r\n            setMessageCity('');\r\n            cityRef.current.style.borderColor = 'green';\r\n        }\r\n\r\n        if (correctInputs){\r\n            setOpenCostumerDetails(false);\r\n        }  \r\n    }\r\n\r\n\r\n    const paymentHandler = (details, data) => {\r\n        /** Here you can call your backend API\r\n          endpoint and update the database */\r\n        console.log(details, data);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h3 className=\"text-center mb-4\">Check-Out</h3>\r\n            <div className=\"row\">\r\n                <div className=\"col-12 col-md-8 paymentForm\">\r\n                    \r\n                        <div className=\"col-12 col-md-10 border-bottom\" style={{borderColor: '#d9d9d9'}}>\r\n                            <Button className=\"btn btn-light btn-block text-left\" type=\"button\"\r\n                             onClick={() => setOpenCostumerDetails(!openCostumerDetails)}\r\n                             aria-controls=\"costumer-details-collapse\"\r\n                             aria-expanded={openCostumerDetails}\r\n                            >\r\n                                Costumer Details\r\n                            </Button>\r\n                            <Collapse in={openCostumerDetails}>\r\n                                <div className=\"mb-2\" id=\"costumer-details-collapse\">\r\n                                    <form>\r\n                                        <div className=\"form-group mt-2 payment-form\">\r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"fullName\">Full name: </label>\r\n                                                <input type=\"text\" className=\"form-control\" ref={fullNameRef} required></input>\r\n                                                <div className=\"invalidMassege text-danger\">\r\n                                                    {messageFullName}\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"phone\">Phone: </label>\r\n                                                <input type=\"tel\" className=\"form-control\" ref={phoneRef} placeholder=\"050-123-1234\" required></input>\r\n                                                <div className=\"invalidMassege text-danger\">\r\n                                                    {messagePhone}\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form-group\">\r\n                                                <label htmlFor=\"email\">Email: </label>\r\n                                                <input type=\"mail\" className=\"form-control\" ref={emailRef} required></input>\r\n                                                <div className=\"invalidMassege text-danger\">\r\n                                                    {messageEmail}\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form-check mt-2\">\r\n                                                <input type=\"checkbox\" className=\"form-check-input\" id=\"ReceiveMarketingInfo\"></input>\r\n                                                <label className=\"form-check-label mb-2\" htmlFor=\"ReceiveMarketingInfo\">I would like to receive information about products and promotions on the site</label>\r\n                                            </div>\r\n                                            \r\n                                            <button type=\"submit\" className=\"btn btn-primary btn-sm px-5\" onClick={submitCostumerDetails}>Next</button>\r\n                                        </div>\r\n                                    </form> \r\n                                </div>\r\n                            </Collapse>\r\n                            \r\n                        </div> \r\n\r\n                        <div className=\"col-12 col-md-10 mt-4 border-bottom\" style={{borderColor: '#d9d9d9'}}>\r\n                            <Button className=\"btn btn-light btn-block text-left\" type=\"button\"\r\n                              onClick={() => setOpenRecipientDetails(!openRecipientDetails)}\r\n                              aria-controls=\"costumer-details-collapse\"\r\n                              aria-expanded={openRecipientDetails}\r\n                            >\r\n                                Recipient Details\r\n                            </Button>\r\n                            <Collapse in={openRecipientDetails}>\r\n                                <div className=\"collapse mb-2\" id=\"RecipientDetails\"  ref={recipientDetails}>\r\n                                    <form>\r\n                                        <div className=\"form-group mt-2\">\r\n                                        \r\n                                            <div className=\"form row form-group\">\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"firstName\">First name:</label>\r\n                                                    <input type=\"text\" className=\"form-control\" ref={firstNameRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageFirstName}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"lastName\">Last name:</label>\r\n                                                    <input type=\"text\" className=\"form-control\" ref={lastNameRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageLastName}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form row form-group\">\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"city\">City:</label>\r\n                                                    <input type=\"text\" className=\"form-control\" ref={cityRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageCity}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"street\">Street:</label>\r\n                                                    <input type=\"text\" className=\"form-control\" ref={streetRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageStreet}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"form row form-group\">\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"apartmentNumber\">Apartment number:</label>\r\n                                                    <input type=\"number\" className=\"form-control\" ref={apartmentNumberRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageApartmentNumber}\r\n                                                    </div>\r\n                                                </div>\r\n                                                <div className=\"col-12 col-md-6\">\r\n                                                    <label htmlFor=\"homeNumber\">Home number:</label>\r\n                                                    <input type=\"number\" className=\"form-control\" ref={homeNumberRef} required></input>\r\n                                                    <div className=\"invalidMassege text-danger\">\r\n                                                        {messageHomeNumber}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <button type=\"submit\" className=\"btn btn-primary btn-sm px-5\" onClick={submitRecipientDetails}>Next</button> \r\n                                        </div>  \r\n                                    </form> \r\n                                </div>\r\n                            </Collapse>\r\n                        </div>\r\n\r\n                        <div className=\"col-12 col-md-10 mt-4\">\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"deliverySelect\">Delivery:</label>\r\n                                <select className=\"form-control\" ref={selectDelivery} onChange={onChangeDelivery}>\r\n                                    <option value=\"Self-pickup\">Self-pickup: $0</option>\r\n                                    <option value=\"Postal-service\">Postal service: $10</option>\r\n                                    <option value=\"Registered-mail\">Registered mail: $30</option>\r\n                                    <option value=\"emissary\">emissary: ${calculateDelivery().toLocaleString()} - Free over $200</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Payment Form */}\r\n                        <div className=\"col-12 col-md-10 border-bottom\" style={{borderColor: '#d9d9d9'}}>\r\n                            <Button className=\"btn btn-light btn-block text-left\" type=\"button\" \r\n                              onClick={() => setOpenPaymentDetails(!openPaymentDetails)}\r\n                              aria-controls=\"costumer-details-collapse\"\r\n                              aria-expanded={openPaymentDetails}\r\n                            >\r\n                                Payment Details\r\n                            </Button>\r\n                            <Collapse in={openPaymentDetails}>\r\n                                <div className=\"mb-2 mt-3\" id=\"paymentDetails\">\r\n                                    <form>\r\n                                        <div className=\"form-group mt-2 payment-form\">\r\n                                            <div className=\"mb-2\" id=\"paypalDetails\">\r\n                                                <PayPalBtn amount = {1} currency = {'USD'} onSuccess={paymentHandler}/>\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </form> \r\n                                </div>\r\n                            </Collapse>\r\n                        </div> \r\n                    \r\n                        <div className=\"col-12 col-md-10 mt-2 mt-4\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">Confirm order</button> \r\n                        </div>\r\n                                            \r\n                </div>\r\n                <div className=\"col-12 col-md-4\">\r\n                    <OrderSummary />\r\n                    <p>Delivery: ${deliveryAmount}</p>\r\n                    <p><b>Total after delivery: <span className=\"text-success\">${getTotalAmountAfterDelivery().toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span></b></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\ShoppingCart.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\Blog.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\ArticlePage.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\ProductPage.jsx",["161"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport {Form, Button} from 'react-bootstrap';\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; \r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport Product from './Product.jsx';\r\nimport {firebasedb} from '../../firebase';\r\nimport { useCart } from '../../context/CartContext';\r\n\r\n\r\nexport default function ProductPage(props) {\r\n    const { handleAddToCart, handleChangeFavorites, favoriteProducts } = useCart();\r\n    const qtyRef = useRef();\r\n    const [products, setProducts] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        \r\n        const fetchData = async () => {\r\n            const snapshot = await firebasedb.ref('products').get()\r\n            setProducts(snapshot.val());\r\n        };\r\n        \r\n        fetchData();\r\n    },[])\r\n\r\n    const createStars = () => {\r\n        let fiveStars = []\r\n        for (let j = 0; j < 5; j++) {\r\n            if (j<props.product.stars)\r\n                fiveStars.push(<i className=\"fas fa-star\" key={j}></i>);\r\n            else\r\n            fiveStars.push(<i className=\"far fa-star\" key={j}></i>);\r\n        }\r\n        return fiveStars;\r\n    };\r\n\r\n    const createQtyList = () => {\r\n        const qtyList = [];\r\n        for(let i=1; i<=10; i++){\r\n            qtyList.push(<option key={i}>{i}</option>);\r\n        }\r\n        return qtyList;\r\n    }\r\n\r\n    const isInStock = () => {\r\n        if (props.product.inStock)\r\n            return <h4 className=\"text-success\">In Stock</h4>\r\n        else\r\n            return <h4 className=\"text-danger\">Out of Stock</h4>\r\n    }\r\n\r\n    const isFavorite = () => {\r\n        if (favoriteProducts){\r\n            const isFavoriteProduct = favoriteProducts.filter(element => element.id === props.product.id);\r\n            if (isFavoriteProduct.length === 0){\r\n                return <i id=\"favoriteIcon\" className=\"far fa-heart ml-2\" onClick={() => handleChangeFavorites(props.product, true)}></i>\r\n            }\r\n            else {\r\n                return <i id=\"favoriteIcon\" className=\"fas fa-heart ml-2\" onClick={() => handleChangeFavorites(props.product, false)}></i>\r\n            }\r\n        }\r\n        else {\r\n            return <i id=\"favoriteIcon\" className=\"far fa-heart ml-2\" onClick={() => handleChangeFavorites(props.product, true)}></i>\r\n        }\r\n    }\r\n\r\n    const displayPrice = (product) => {\r\n        if(product.discount !== 0){\r\n            return (<div>\r\n                        <p className=\"card-text mx-0 my-0\">{product.discount * 100}% OFF </p>\r\n                        <p><del>${product.price}</del>&ensp; \r\n                            ${product.price * (1 - product.discount)}\r\n                        </p>\r\n                    </div>)\r\n        }\r\n        else{\r\n            return <p>${product.price}</p>\r\n        }\r\n    }\r\n\r\n    function getRelatedProducts() {\r\n        if (products)\r\n            return products.filter(element => element.category === props.product.category && element.id !== props.product.id);\r\n        return [];\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container py-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-12 col-md-6 product-image\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <Carousel>\r\n                                {props.product.images.map((image, index) => (\r\n                                    <div key={index}>\r\n                                        <img src={image} alt=\"carousel_image\"/>\r\n                                    </div>\r\n                                ))}\r\n                            </Carousel>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-12 col-md-6 product-details\">\r\n                    <div id=\"ProductTitle\" className=\"mt-5\">\r\n                        <h1>{props.product.name}</h1>\r\n                        {createStars()}\r\n                        <h2>{props.product.discount * 100}% off</h2>\r\n                        <h3><span style={{textDecoration: \"line-through\"}}>${props.product.price}</span> ${props.product.price * (1- props.product.discount)}</h3>\r\n                    </div>\r\n                    <Form>\r\n                        <Form.Group controlId=\"qty\" className=\"d-inline-flex\">\r\n                            <Form.Label className=\"p-2\">Qty:</Form.Label>\r\n                            <Form.Control as=\"select\" className=\"p-2 col-sm-8\" ref={qtyRef}>\r\n                            {createQtyList()}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                    <div className=\"d-flex align-items-center\">\r\n                        <Button variant=\"primary\" className=\"px-5\" onClick={() => handleAddToCart(props.product, qtyRef.current.value)}>\r\n                            Add to cart\r\n                        </Button>\r\n                        {isFavorite()}\r\n                    </div>\r\n                    <div id=\"ProductOtherDetails\" className=\"mt-5\">\r\n                        {isInStock()}\r\n                        <p><strong>Description:</strong> {props.product.description}</p>\r\n                        <p><strong>Category:</strong> {props.product.category}</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"mb-2\">\r\n                            <strong>Related Items:</strong>\r\n                        </p>\r\n                        {\r\n                            getRelatedProducts().map(productElement => \r\n                                <Product key={productElement.id} productElement={productElement}/>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\Store.jsx",["162","163","164","165"],"import React, { useRef, useState, useEffect, useCallback, dispatch} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Product from './Product.jsx';\r\nimport {firebasedb} from '../../firebase';\r\n\r\n\r\nexport default function Store(props) {\r\n    const [products, setProducts] = useState([]);\r\n    const [category, setCategory] = useState([]);\r\n    const [valuePriceSelect, setValuePriceSelect] = useState(0);\r\n    const [valueSortSelect, setValueSortSelect] = useState('');\r\n    \r\n    const priceRangeRef = useRef();\r\n    const onSaleRef = useRef();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        \r\n        firebasedb.ref('products').get()\r\n        .then( snapshot => {\r\n            const categories = [];\r\n            snapshot.val().forEach(item => {\r\n                const category = categories.filter(category => {return category.name === item.category});\r\n                if (category.length === 0) {\r\n                    categories.push({name: item.category, isChecked: false, subCategory: [{name: item.subcategory, isChecked: false}]});\r\n                }\r\n                else {\r\n                    const subcategory = category[0].subCategory.filter(subCategory => {return subCategory.name === item.subcategory})\r\n                    if (subcategory.length === 0) {\r\n                        category[0].subCategory.push({name: item.subcategory, isChecked: false});\r\n                    }\r\n                }\r\n            });\r\n\r\n            setProducts(snapshot.val());\r\n            setCategory(categories);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        handleStoreCategories();\r\n    }, [props.location.pathname])\r\n\r\n    useEffect(() => {\r\n        handleSearch();\r\n    }, [props.location.search])\r\n\r\n    const setPriceValue = (event) => {\r\n        setValuePriceSelect(event.target.value);\r\n    }\r\n\r\n    const filterCategory = (event) => {\r\n        category.forEach(categoryItem => {\r\n            if (categoryItem.name === event.target.value)\r\n                categoryItem.isChecked = event.target.checked;\r\n        })\r\n    }\r\n\r\n    const filterSubcategory = (event) => {\r\n        category.forEach(categoryItem => {\r\n            categoryItem.subCategory.forEach(subCategoryItem => {\r\n                if (subCategoryItem.name === event.target.value)\r\n                    subCategoryItem.isChecked = event.target.checked;\r\n            })\r\n        })\r\n    }\r\n\r\n    const displayFilteredItems = () => {\r\n        let checkedCategories = [];\r\n        let checkedSubCategories = [];\r\n        category.forEach(categoryItem => {\r\n            if (categoryItem.isChecked)\r\n                checkedCategories.push(categoryItem.name);\r\n\r\n            categoryItem.subCategory.forEach(subCategoryItem => {\r\n                if (subCategoryItem.isChecked)\r\n                    checkedSubCategories.push(subCategoryItem.name);\r\n            })\r\n        })\r\n\r\n        const storeItems = [...products]; \r\n        storeItems.forEach(element => {\r\n            if (checkedCategories.length === 0 && checkedSubCategories.length === 0)\r\n                element.display = true;\r\n            else if (checkedCategories.length === 0 && checkedSubCategories.length > 0) {\r\n                element.display = checkedSubCategories.includes(element.subcategory);\r\n            }\r\n            else if (checkedCategories.length > 0 && checkedSubCategories.length === 0) {\r\n                element.display = checkedCategories.includes(element.category);\r\n            }\r\n            else {\r\n                element.display = checkedCategories.includes(element.category) && checkedSubCategories.includes(element.subcategory);\r\n            }\r\n        });\r\n        \r\n        if (onSaleRef.current.checked){\r\n            storeItems.forEach(element => {\r\n                element.display &= element.discount > 0;\r\n            })\r\n        }\r\n        \r\n        if (valuePriceSelect > 0) {\r\n            storeItems.forEach(element => {\r\n                element.display &= element.price * (1 - element.discount) <= valuePriceSelect;\r\n            });\r\n        }\r\n\r\n        setProducts(storeItems);\r\n    }\r\n\r\n    const resetFilter = () => {\r\n        // setting all categories and sub categories elements checked = false\r\n        const elements = document.getElementsByClassName(\"form-check-input\");\r\n        Array.from(elements).forEach((element) => {\r\n            element.checked = false;\r\n        });\r\n\r\n        onSaleRef.current.isChecked = false;\r\n\r\n        // setting all categories and sub categories state checked = false\r\n        category.forEach(categoryItem => {\r\n            categoryItem.isChecked = false;\r\n\r\n            categoryItem.subCategory.forEach(subCategoryItem => {\r\n                subCategoryItem.isChecked = false;\r\n            })\r\n        })\r\n\r\n        // reset price scroller element to be 0\r\n        priceRangeRef.current.value = 0;\r\n\r\n        // display all items (no item it filtered)\r\n        const displayProducts = products;\r\n        displayProducts.forEach(element => {\r\n            element.display = true;\r\n        })\r\n\r\n        setProducts(displayProducts);\r\n        setCategory(category) ;\r\n        setValuePriceSelect(0);  \r\n    }\r\n\r\n    const changeSort = (event) => {\r\n        setValueSortSelect(event.target.value);\r\n        const sortedStore = products;\r\n\r\n        switch (event.target.value){\r\n            case 'low': {\r\n                sortedStore.sort(function (a, b) {\r\n                    return a.price * (1 - a.discount) - b.price * (1 - b.discount);\r\n                });\r\n                break;\r\n            }\r\n            case 'high': {\r\n                sortedStore.sort(function (a, b) {\r\n                    return b.price * (1 - b.discount) - a.price * (1 - a.discount);\r\n                });\r\n                break;\r\n            }\r\n            default: {\r\n                sortedStore.sort(function (a, b) {\r\n                    return a.id - b.id;\r\n                  });\r\n                break;\r\n            }\r\n        }\r\n\r\n        setProducts(sortedStore);\r\n    }\r\n\r\n    const getAllSubCategories = () => {\r\n        let subCategories = [];\r\n        category.forEach(categoryItem => {\r\n            categoryItem.subCategory.forEach(subCategoryItem => {\r\n                subCategories.push(subCategoryItem.name);\r\n            })\r\n        })\r\n        return subCategories;\r\n    }\r\n\r\n    const getAllCategoriesUrl = () => {\r\n        let categories = [];\r\n        category.forEach(categoryItem => {\r\n            categories.push(categoryItem.name.replace(/\\s/g, ''));\r\n        });\r\n        return categories;\r\n    }\r\n\r\n    function handleStoreCategories() {    \r\n        // set sale reference if the location.onSale exists   \r\n        onSaleRef.current.checked |= props.location.onSale != null;\r\n\r\n        const checkedCategory = [...category];\r\n        const elements = document.getElementsByClassName(\"form-check-input\");\r\n        // setting the category (if exists) to be true\r\n        const transformedPath = props.location.pathname.split('/');\r\n        if (transformedPath.length > 2 && getAllCategoriesUrl().includes(transformedPath[2])) {\r\n            Array.from(elements).forEach(element => {   \r\n                if (element.value.replace(/\\s/g, '') === transformedPath[2]) {\r\n                    element.checked = true;\r\n                    checkedCategory.forEach(categoryItem => {\r\n                        categoryItem.isChecked = categoryItem.name === element.value;\r\n                    })\r\n                }\r\n                else {\r\n                    element.checked = false;\r\n                }\r\n            });\r\n            setCategory(checkedCategory);\r\n        }\r\n        else {\r\n            resetFilter();\r\n        }\r\n\r\n        displayFilteredItems();\r\n    }\r\n\r\n    function handleSearch() {\r\n        const urlParams = new URLSearchParams(props.location.search);\r\n        if (urlParams.get('q')) {\r\n            const searchProducts = [...products]\r\n            searchProducts.forEach(element => {\r\n                element.display = element.name.toLowerCase().includes(urlParams.get('q').toLowerCase());\r\n            });\r\n            \r\n            setProducts(searchProducts);\r\n        }\r\n    }\r\n\r\n    const getProductsElements = () => {\r\n        return products.filter(element => element.display).map(productElement =>\r\n            <Product key={productElement.id} productElement={productElement}/>)\r\n    }\r\n\r\n    return (\r\n        <div className= \"container py-5\">\r\n            <div className=\"row\">\r\n                <div className=\"col-2 pr-5\">\r\n                    <h5>Sort</h5>\r\n                    <div className=\"form-group mb-4\">\r\n                        <select className=\"form-control form-control-sm\" value={valueSortSelect} onChange={changeSort}>\r\n                            <option value=\"\"> </option>\r\n                            <option value=\"low\">Price: low to high</option>\r\n                            <option value=\"high\">Price: high to low</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <h5>Filter</h5>\r\n\r\n                    <h6>Category</h6>\r\n                    {category.map((element, index) => (\r\n                        <div className= \"form-check\" key={index}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" value={element.name} onChange={filterCategory}></input>\r\n                            <label className=\"form-check-label\" htmlFor={Object.keys(element.name)}>\r\n                                {element.name}\r\n                            </label>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <br></br>\r\n                    <h6>Sub Category</h6>    \r\n                    {getAllSubCategories().map((element, index) => (\r\n                        <div className=\"form-check\" key={index}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" value={element} onChange={filterSubcategory}></input>\r\n                            <label className=\"form-check-label\" htmlFor={Object.keys(element)}>\r\n                                {element}\r\n                            </label>\r\n                        </div>\r\n                    ))}\r\n\r\n                    <br></br>\r\n                    <div className=\"form-check\">\r\n                        <input type=\"checkbox\" className=\"form-check-input\" id=\"onSaleCheck\" ref={onSaleRef}></input>\r\n                        <label className=\"form-check-label\" htmlFor=\"onSaleCheck\"><h6>On Sale</h6></label>\r\n                    </div>\r\n\r\n                    <br></br>\r\n                    <h6>Price</h6> \r\n                    <label htmlFor=\"priceRange\" className=\"form-label\"></label>\r\n                    <input type=\"range\" className=\"form-range\" id=\"priceRange\" min=\"0\" max=\"1000\" step=\"10\" onInput={setPriceValue} ref={priceRangeRef}></input>\r\n                    <output> {valuePriceSelect}</output>\r\n\r\n                    <div className=\"mt-3\">\r\n                        <Link to=\"/store\" className=\"btn btn-outline-primary btn-sm\" type=\"button\" onClick={displayFilteredItems}>Apply</Link>\r\n                        <Link to=\"/store\" className=\"btn btn-outline-primary btn-sm mx-2\" type=\"button\" onClick={resetFilter}>Reset</Link>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-10 justify-content-center\">\r\n                    <div className=\"row\">\r\n                        {getProductsElements()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\firebase.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\context\\AuthContext.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\WebsiteAdmin.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\AlertBox.jsx",["166"],"import React, {useState} from 'react'\r\nimport {Alert} from 'react-bootstrap'\r\nimport { useCart } from '../context/CartContext';\r\n\r\nexport default function AlertBox() {\r\n    const { displayAlert, setDisplayAlert} = useCart()\r\n\r\n    if (displayAlert) {\r\n        return (\r\n        <Alert variant=\"success\" onClose={() => setDisplayAlert(false)} dismissible>\r\n            The product was successfully added to the shopping cart\r\n        </Alert>\r\n        );\r\n    }\r\n    else {\r\n        return <div></div>\r\n    }\r\n}\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\CartProduct.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\data\\images.js",[],["167","168"],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\OrderSummary.jsx",["169","170"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport {firebasedb} from '../../firebase';\r\nimport { useCart } from '../../context/CartContext';\r\n\r\n\r\nexport default function OrderSummary() {\r\n    const { getSubTotalAmount, tax } = useCart();\r\n\r\n    const cuponInputRef = useRef();\r\n    const cuponDiscountRef = useRef();\r\n    const totalAmountRef = useRef();\r\n    const amountAfterCupon = useRef();\r\n    \r\n    const [coupons, setCoupons] = useState([]);\r\n    const [myCoupon, setMyCoupon] = useState({});\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"effect1\")\r\n        const fetchData = async () => {\r\n            const snapshot = await firebasedb.ref('coupons').get()\r\n            setCoupons(snapshot.val());\r\n        };\r\n        \r\n        fetchData();\r\n    },[])   \r\n\r\n    useEffect(() => {\r\n        console.log(\"effect3\")\r\n        const coupon = JSON.parse(localStorage.getItem('myCoupon'));\r\n        if (coupon)\r\n            setMyCoupon(coupon);\r\n    }, [])\r\n\r\n\r\n    const getTotalAmount = () => {\r\n        return getSubTotalAmount() * (1 + tax);\r\n    }\r\n\r\n    const onActivateCoupon = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (cuponInputRef.current.value) {   \r\n            let cuponConfirmed = false\r\n            Object.keys(coupons).forEach(element => {\r\n                if (element === cuponInputRef.current.value){\r\n                    {console.log(coupons)}\r\n                    {console.log(myCoupon)}\r\n                    cuponConfirmed = true;\r\n                    const coupon = {code: element, discount: coupons[element]}\r\n                    setMyCoupon(coupon);\r\n                    localStorage.setItem('myCoupon', JSON.stringify(coupon));\r\n                    totalAmountRef.current.style.textDecorationLine = \"line-through\";\r\n                }\r\n            });\r\n            if (!cuponConfirmed){\r\n                alert(\"Coupon code is invalid\")\r\n            }\r\n        }\r\n    }\r\n\r\n    const onCancelCoupon = (e) => {\r\n        e.preventDefault();\r\n        setMyCoupon({});\r\n        localStorage.removeItem('myCoupon')\r\n    }\r\n\r\n        \r\n    return (\r\n    <>\r\n    {console.log(coupons)}\r\n    {console.log(myCoupon)}\r\n        <h4 className=\"border-bottom pb-2\">Order Summary</h4>\r\n        <p>Subtotal: ${(getSubTotalAmount()).toLocaleString()}</p>\r\n        <p>Taxes: ${((getSubTotalAmount() * tax).toFixed(2)).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</p>\r\n        <form>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"cupon\">Cupon-code:</label>\r\n                <input type=\"text\" className=\"form-control d-inline\" id=\"cuponInput\" ref={cuponInputRef} defaultValue={myCoupon ? myCoupon.code : ''}></input>\r\n                <div className=\"mt-2\">\r\n                    <button type=\"submit\" className=\"btn btn-outline-primary btn-sm d-inline mr-2\" onClick={onActivateCoupon}>Activate coupon</button>\r\n                    <button type=\"submit\" className=\"btn btn-outline-primary btn-sm d-inline\" onClick={onCancelCoupon}>Cancel coupon</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n\r\n        {myCoupon.code ?\r\n            <div className=\"text-success\" ref={cuponDiscountRef}>\r\n                {myCoupon.discount * 100}% discount\r\n            </div>\r\n        : null\r\n        }\r\n        <p className=\"mt-1\">\r\n            <b>Total:</b> \r\n            {/* <span className={`text-success ${myCoupon.code ? 'line-through': ''}}`} ref={totalAmountRef} > */}\r\n            <span className=\"text-success\" style={myCoupon.code ? {textDecorationLine: 'line-through'} : {}} ref={totalAmountRef} >\r\n                ${(getTotalAmount()).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n            </span>\r\n        </p>\r\n        {myCoupon.code ?\r\n            <p className=\"text-success\" ref={amountAfterCupon}>\r\n                ${(getTotalAmount() * (1 - myCoupon.discount)).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n            </p>\r\n        : null\r\n        }\r\n                    \r\n    </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\store\\Product.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\SignUp.jsx",["171","172"],"import React, { useRef, useState } from 'react'\r\nimport { Container, Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../../context/AuthContext'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport {firebasedb} from '../../firebase';\r\nimport {auth} from '../../firebase';\r\n\r\nexport default function SignUp() {\r\n    const firstNameRef = useRef();\r\n    const lastNameRef = useRef();\r\n    const emailRef = useRef();\r\n    const phoneRef = useRef();\r\n    const passwordRef = useRef();\r\n    const passwordConfirmRef = useRef();\r\n    const { signup, currentUser } = useAuth();\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading]= useState(false);\r\n    const history = useHistory();\r\n  \r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value){\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        try{\r\n            setError('')\r\n            setLoading(true)\r\n            const a = await auth.createUserWithEmailAndPassword(emailRef.current.value, passwordRef.current.value)\r\n            console.log(a)\r\n            console.log(firstNameRef.current.value)\r\n            await auth.onAuthStateChanged((user)  => {\r\n                firebasedb.ref('users').child(user.uid).set(\r\n                    {\r\n                        id: user.uid,\r\n                        email: user.email,\r\n                        role: \"client\",\r\n                        active: true\r\n                    }\r\n                )\r\n            })\r\n            const updates = {};\r\n            updates['/users/' + a.user.uid + '/firstName'] = firstNameRef.current.value;\r\n            updates['/users/' + a.user.uid + '/lastName'] = lastNameRef.current.value;\r\n            updates['/users/' + a.user.uid + '/phone'] = phoneRef.current.value;\r\n            firebasedb.ref().update(updates);\r\n\r\n            history.push(\"/\")\r\n        } \r\n        catch(err) {\r\n            console.log(err);\r\n            setError('Failed to create an account')\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }   \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"d-flex justify-content-center align-items-center\" style={{minHeight: \"80vh\"}}>\r\n                <div className=\"w-100\" style={{maxWidth: \"400px\"}}>\r\n                    <Card className=\"px-3\">\r\n                        <Card.Body>\r\n                            <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <Form.Group id=\"firstName\">\r\n                                    <Form.Control type=\"text\" placeholder=\"First name\" ref={firstNameRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group id=\"lastName\">\r\n                                    <Form.Control type=\"text\" placeholder=\"Last name\" ref={lastNameRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group id=\"email\">\r\n                                    <Form.Control type=\"email\" placeholder=\"Email\" ref={emailRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group id=\"phone\">\r\n                                    <Form.Control type=\"tel\" placeholder=\"Phone\" ref={phoneRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group id=\"password\">\r\n                                    <Form.Control type=\"password\" placeholder=\"Password\" ref={passwordRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Form.Group id=\"password-confirm\">\r\n                                    <Form.Control type=\"password\" placeholder=\"Password Confirmation\" ref={passwordConfirmRef} required></Form.Control>\r\n                                </Form.Group>\r\n\r\n                                <Button disabled={loading} className=\"w-100 mt-3\" type=\"submit\">Sign Up</Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        Already have an account? <Link to=\"/login\">Log In</Link>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\ForgotPassword.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\ChangePassword.jsx",["173"],"import React, { useRef, useState } from 'react'\r\nimport { Container, Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport {useAuth} from '../../context/AuthContext';\r\n\r\nexport default function ChangePassword() {\r\n    const currentPasswordRef = useRef();\r\n    const newPasswordRef = useRef();\r\n    const newPasswordConfirmRef = useRef();\r\n    const [loading, setLoading]= useState(false);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const { currentUser, updateMyPassword } = useAuth();\r\n\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        setLoading(false)\r\n\r\n        if (newPasswordRef.current.value !== newPasswordConfirmRef.current.value){\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        updateMyPassword(currentPasswordRef.current.value, newPasswordRef.current.value)\r\n            .then(() => {\r\n                setSuccess('Password changed successfully')\r\n            })\r\n            .catch(() => {\r\n                setError('Failed to change password')\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"d-flex justify-content-center align-items-center\" style={{minHeight: \"80vh\"}}>\r\n                <div className=\"w-100\" style={{maxWidth: \"600px\"}}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title>Change Password</Card.Title>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            {success && <Alert variant=\"success\">{success}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <Form.Group id=\"currentPassword\">\r\n                                    <Form.Control type=\"password\" ref={currentPasswordRef} placeholder=\"Current password\" ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group id=\"newPassword\">\r\n                                    <Form.Control type=\"password\" ref={newPasswordRef} placeholder=\"New password\" ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group id=\"newPasswordConfirm\">\r\n                                    <Form.Control type=\"password\" ref={newPasswordConfirmRef} placeholder=\"Password confirmation\" ></Form.Control>\r\n                                </Form.Group>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">CHANGE PASSWORD</Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </Container>  \r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\Login.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\PrivateRoute.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\authentication\\Profile.jsx",["174"],"import React, {useState, useRef, useEffect} from 'react'\r\nimport {Container, Card, Button, Alert, Form, Col, Row} from 'react-bootstrap'\r\nimport {useAuth} from '../../context/AuthContext';\r\nimport {firebasedb} from '../../firebase';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Profile() {\r\n    const firstNameRef = useRef();\r\n    const lastNameRef = useRef();\r\n    const emailRef = useRef();\r\n    const phoneRef = useRef();\r\n    const passwordRef = useRef();\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n    const { currentUser, updateMyEmail, updateDetails } = useAuth();\r\n    const [loading, setLoading]= useState(false);\r\n    const [myUser, setMyUser] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        if (currentUser){\r\n            const fetchData = async () => {\r\n                const snapshot = await firebasedb.ref('users').child(currentUser.uid).get()\r\n                setMyUser(snapshot.val());\r\n            };\r\n            \r\n            fetchData();\r\n        }\r\n    }, [currentUser])\r\n\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n\r\n        try {\r\n            await updateMyEmail(passwordRef.current.value, emailRef.current.value);\r\n        \r\n            const updates = {};\r\n            if(firstNameRef.current.value)\r\n                updates['/users/' + currentUser.uid + '/firstName'] = firstNameRef.current.value;\r\n            if(lastNameRef.current.value)\r\n                updates['/users/' + currentUser.uid + '/lastName'] = lastNameRef.current.value;\r\n            if(phoneRef.current.value)\r\n                updates['/users/' + currentUser.uid + '/phone'] = phoneRef.current.value;\r\n            if(emailRef.current.value)\r\n                updates['/users/' + currentUser.uid + '/email'] = emailRef.current.value;\r\n            updateDetails(passwordRef.current.value, updates);\r\n\r\n            setSuccess('Details updated successfully')\r\n        }\r\n        catch(err) {\r\n            console.log(err);\r\n            setError(err.message)\r\n        }\r\n        finally {\r\n            setLoading(false)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Container className=\"d-flex justify-content-center align-items-center\" style={{minHeight: \"80vh\"}}>\r\n                <div className=\"w-100\" style={{maxWidth: \"600px\"}}>\r\n                    <Card>\r\n                        <Card.Header>\r\n                            <Card.Title>Profile</Card.Title>\r\n                            <Card.Subtitle className=\"mb-2 text-muted\">The information can be edited</Card.Subtitle>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                            {success && <Alert variant=\"success\">{success}</Alert>}\r\n                            <Form onSubmit={handleSubmit}>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group id=\"firstName\">\r\n                                            <Form.Label>First name</Form.Label>\r\n                                            <Form.Control type=\"text\" ref={firstNameRef} defaultValue={myUser ? myUser.firstName : ''}></Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group id=\"lastName\">\r\n                                            <Form.Label>Last name</Form.Label>\r\n                                            <Form.Control type=\"text\" ref={lastNameRef} defaultValue={myUser ? myUser.lastName : ''}></Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group id=\"email\">\r\n                                            <Form.Label>Email</Form.Label>\r\n                                            <Form.Control type=\"email\" ref={emailRef} defaultValue={currentUser.email} ></Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                    <Col>\r\n                                        <Form.Group id=\"phone\">\r\n                                            <Form.Label>Phone</Form.Label>\r\n                                            <Form.Control type=\"tel\" ref={phoneRef} defaultValue={myUser ? myUser.phone : ''}></Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Form.Group id=\"password\">\r\n                                            <Form.Label>Password</Form.Label>\r\n                                            <Form.Control type=\"password\" ref={passwordRef} ></Form.Control>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Button disabled={loading} className=\"w-100\" type=\"submit\">SAVE CHANGES</Button>\r\n                            </Form>\r\n                        </Card.Body>\r\n                    </Card>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        <Link to=\"/change-password\">Change Password</Link>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\n\r\n{/* <form>\r\n    <label htmlFor=\"firstName\">First name </label>\r\n    <input type=\"text\" className=\"form-control\" ref={this.firstNameRef} required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messageFirstName}\r\n    </div>\r\n\r\n    <label htmlFor=\"lastName\">Last name </label>\r\n    <input type=\"text\" className=\"form-control\" ref={this.lastNameRef} required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messageLastName}\r\n    </div>\r\n\r\n    <label htmlFor=\"email\">Email </label>\r\n    <input type=\"mail\" className=\"form-control\" ref={this.emailRef} required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messageEmail}\r\n    </div>\r\n\r\n    <label htmlFor=\"phone\">Phone </label>\r\n    <input type=\"tel\" className=\"form-control\" ref={this.phoneRef} placeholder=\"050-123-1234\" required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messagePhone}\r\n    </div>\r\n\r\n    <label htmlFor=\"country\">Country </label>\r\n    <input type=\"text\" className=\"form-control\" ref={this.countryRef} required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messageCountry}\r\n    </div>\r\n\r\n    <label htmlFor=\"state\">State </label>\r\n    <input type=\"text\" className=\"form-control\" ref={this.stateRef} required></input>\r\n    <div className=\"invalidMassege text-danger\">\r\n        {this.state.messageState}\r\n    </div>\r\n\r\n    <div className=\"d-flex justify-content-center mt-3\">\r\n    <button type=\"submit\" className=\"btn btn-primary align-middle\" onClick={this.submitContact}>Submit</button>\r\n    </div>\r\n</form> */}\r\n","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\Article.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\cart-and-payment\\PayPalBtn.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\blog\\ArticleComment.jsx",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\users.js",["175"],"import * as React from \"react\";\r\nimport {\r\n    List,\r\n    Datagrid,\r\n    TextField,\r\n    BooleanField,\r\n    EmailField,\r\n    EditButton,\r\n    Edit,\r\n    Create,\r\n    SimpleForm,\r\n    SelectInput,\r\n    TextInput,\r\n    BooleanInput,\r\n    Filter\r\n} from 'react-admin';\r\n\r\nexport const UserList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <BooleanField source=\"active\" />\r\n            <TextField source=\"role\" />\r\n            <TextField source=\"firstName\" label=\"First Name\" />\r\n            <TextField source=\"lastName\" label=\"Last Name\" />\r\n            <EmailField source=\"email\" />\r\n            <TextField source=\"phone\" />\r\n            <EditButton />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const UserEdit = props => (\r\n    <Edit {...props}>\r\n        <SimpleForm>\r\n            <TextInput disabled source=\"id\" />\r\n            <TextInput disabled source=\"email\" />\r\n            <SelectInput source=\"role\" choices={[\r\n                { id: 'admin', name: 'admin' },\r\n                { id: 'site-owner', name: 'site-owner' },\r\n                { id: 'client', name: 'client' }\r\n            ]} />\r\n            <TextInput source=\"firstName\" label=\"First Name\" />\r\n            <TextInput source=\"lastName\" label=\"Last Name\" />\r\n            <TextInput source=\"phone\" />\r\n            <BooleanInput source=\"active\" />\r\n            {/* <TextInput source=\"address.street\" label=\"Street\" />\r\n            <NumberInput source=\"address.houseNumber\" label=\"House Number\" />\r\n            <NumberInput source=\"address.apartmentNumber\" label=\"Apartment Number\" />\r\n            <TextInput source=\"address.city\" label=\"City\" />\r\n            <TextInput source=\"address.country\" label=\"Country\" />\r\n            <NumberInput source=\"address.zipcode\" label=\"Zipcode\" /> */}\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const UserCreate = props => (\r\n    <Create {...props}>\r\n        <SimpleForm>        \r\n            <SelectInput source=\"role\" choices={[\r\n                { id: 'admin', name: 'admin' },\r\n                { id: 'site-owner', name: 'site-owner' },\r\n                { id: 'client', name: 'client' }\r\n            ]} />\r\n            <TextInput source=\"email\" />\r\n            <TextInput source=\"firstName\" label=\"First Name\" />\r\n            <TextInput source=\"lastName\" label=\"Last Name\" />\r\n            <TextInput source=\"phone\" />\r\n            <BooleanInput source=\"active\" />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nconst UserFilter = (props) => (\r\n    <Filter {...props}>\r\n        <TextInput label=\"Search\" source=\"q\" alwaysOn />\r\n        <BooleanInput source=\"active\" />\r\n        <SelectInput source=\"role\" choices={[\r\n                { id: 'admin', name: 'admin' },\r\n                { id: 'site-owner', name: 'site-owner' },\r\n                { id: 'client', name: 'client' }\r\n        ]} />\r\n    </Filter>\r\n);","C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\posts.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\components\\admin\\products.js",[],"C:\\Users\\yaniv\\Desktop\\Final-project-front-end\\client\\src\\context\\CartContext.js",["176","177"],"import React, { useContext, useState, useEffect} from 'react';\r\n\r\nconst CartContext = React.createContext();\r\n\r\nexport function useCart() {\r\n    return useContext(CartContext)\r\n}\r\n\r\nexport function CartProvider({children}) {\r\n    const [cartProducts, setCartProducts] = useState([]);\r\n    const [favoriteProducts, setFavoriteProducts] = useState([]);\r\n    const [displayAlert, setDisplayAlert] = useState(false);\r\n    const tax = 0.17;\r\n\r\n    useEffect(() => {\r\n        const cartProducts = JSON.parse(localStorage.getItem('cartProducts'));\r\n        if (cartProducts !== null) {\r\n            setCartProducts(cartProducts)\r\n        }\r\n    \r\n        const favoriteProducts = JSON.parse(localStorage.getItem('favoriteProducts'));\r\n        if (favoriteProducts !== null) {\r\n            setFavoriteProducts(favoriteProducts)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('cartProducts', JSON.stringify(cartProducts));\r\n    },[cartProducts])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('favoriteProducts', JSON.stringify(favoriteProducts));\r\n    },[favoriteProducts])\r\n\r\n    const handleAddToCart = (product, qty) => {\r\n        setDisplayAlert(true);\r\n        setTimeout(() => {\r\n            setDisplayAlert(false);\r\n        }, 5000);\r\n    \r\n        const updatedCartProducts = [...cartProducts];\r\n    \r\n        const productsFound = cartProducts.filter(element => element.id === product.id)\r\n        if (productsFound.length > 0){\r\n            updatedCartProducts.forEach((element) => {\r\n            if(element.id === product.id)\r\n              element.quantity = parseInt(element.quantity) + parseInt(qty);\r\n          })\r\n        }\r\n        else{\r\n            updatedCartProducts.push({...product, quantity: qty});\r\n        }\r\n        \r\n        setCartProducts(updatedCartProducts);\r\n    }\r\n\r\n    const handleChangeFavorites = (product, toFavorate) => {\r\n        const updatedFavoriteProducts = [...favoriteProducts];\r\n        if (toFavorate){\r\n            updatedFavoriteProducts.push(product);\r\n        }\r\n        else{\r\n            updatedFavoriteProducts = updatedFavoriteProducts.filter(element => element.id !== product.id)\r\n        }\r\n        \r\n        setFavoriteProducts(updatedFavoriteProducts)\r\n    }\r\n\r\n    const handleQtyChange = (product, qty) => {\r\n        const updatedCartProducts = [...cartProducts];\r\n        updatedCartProducts.forEach(element => {\r\n          if(element.id === product.id)\r\n            element.quantity = parseInt(qty);\r\n        });\r\n        setCartProducts(updatedCartProducts);\r\n    }\r\n\r\n    const handleDeleteCartProduct = (product) => {\r\n        const updatedCartProducts = [...cartProducts];\r\n        updatedCartProducts = updatedCartProducts.filter(element => element.id !== product.id);\r\n        setCartProducts(updatedCartProducts);\r\n    }\r\n\r\n    const calculateSumQtyCart = () => {\r\n        return cartProducts.reduce((accumulator, currentValue) => accumulator + parseInt(currentValue.quantity), 0)\r\n    }\r\n\r\n    const getSubTotalAmount = () => {\r\n        const totalAmount = cartProducts.reduce((accumulator, currentValue) => \r\n        accumulator + (currentValue.price * (1-currentValue.discount) * currentValue.quantity), 0);\r\n        return totalAmount;\r\n    }\r\n\r\n    const value = {\r\n        cartProducts,\r\n        favoriteProducts,\r\n        displayAlert,\r\n        tax,\r\n        handleAddToCart,\r\n        handleChangeFavorites,\r\n        handleQtyChange,\r\n        handleDeleteCartProduct,\r\n        calculateSumQtyCart,\r\n        getSubTotalAmount,\r\n        setDisplayAlert\r\n    }\r\n\r\n    return (\r\n        <CartContext.Provider value={value}>\r\n            {children}\r\n        </CartContext.Provider>\r\n    );\r\n}\r\n",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":17,"column":11,"nodeType":"184","messageId":"185","endLine":17,"endColumn":29},{"ruleId":"182","severity":1,"message":"186","line":68,"column":11,"nodeType":"184","messageId":"185","endLine":68,"endColumn":23},{"ruleId":"182","severity":1,"message":"187","line":1,"column":46,"nodeType":"184","messageId":"185","endLine":1,"endColumn":57},{"ruleId":"182","severity":1,"message":"188","line":1,"column":59,"nodeType":"184","messageId":"185","endLine":1,"endColumn":67},{"ruleId":"189","severity":1,"message":"190","line":42,"column":8,"nodeType":"191","endLine":42,"endColumn":33,"suggestions":"192"},{"ruleId":"189","severity":1,"message":"193","line":46,"column":8,"nodeType":"191","endLine":46,"endColumn":31,"suggestions":"194"},{"ruleId":"182","severity":1,"message":"195","line":1,"column":16,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"178","replacedBy":"196"},{"ruleId":"180","replacedBy":"197"},{"ruleId":"198","severity":1,"message":"199","line":48,"column":21,"nodeType":"200","messageId":"201","endLine":48,"endColumn":43},{"ruleId":"198","severity":1,"message":"199","line":49,"column":21,"nodeType":"200","messageId":"201","endLine":49,"endColumn":44},{"ruleId":"182","severity":1,"message":"202","line":15,"column":13,"nodeType":"184","messageId":"185","endLine":15,"endColumn":19},{"ruleId":"182","severity":1,"message":"203","line":15,"column":21,"nodeType":"184","messageId":"185","endLine":15,"endColumn":32},{"ruleId":"182","severity":1,"message":"203","line":12,"column":13,"nodeType":"184","messageId":"185","endLine":12,"endColumn":24},{"ruleId":"198","severity":1,"message":"204","line":125,"column":1,"nodeType":"200","messageId":"205","endLine":165,"endColumn":12},{"ruleId":"182","severity":1,"message":"206","line":74,"column":7,"nodeType":"184","messageId":"185","endLine":74,"endColumn":17},{"ruleId":"207","severity":1,"message":"208","line":63,"column":13,"nodeType":"184","messageId":"209","endLine":63,"endColumn":36},{"ruleId":"207","severity":1,"message":"210","line":80,"column":9,"nodeType":"184","messageId":"209","endLine":80,"endColumn":28},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],"no-unused-vars","'costumerDetailsRef' is assigned a value but never used.","Identifier","unusedVar","'displayPrice' is assigned a value but never used.","'useCallback' is defined but never used.","'dispatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleStoreCategories'. Either include it or remove the dependency array.","ArrayExpression",["213"],"React Hook useEffect has a missing dependency: 'handleSearch'. Either include it or remove the dependency array.",["214"],"'useState' is defined but never used.",["211"],["212"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'signup' is assigned a value but never used.","'currentUser' is assigned a value but never used.","Block is redundant.","redundantBlock","'UserFilter' is assigned a value but never used.","no-const-assign","'updatedFavoriteProducts' is constant.","const","'updatedCartProducts' is constant.","no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},"Update the dependencies array to be: [handleStoreCategories, props.location.pathname]",{"range":"219","text":"220"},"Update the dependencies array to be: [handleSearch, props.location.search]",{"range":"221","text":"222"},[1631,1656],"[handleStoreCategories, props.location.pathname]",[1716,1739],"[handleSearch, props.location.search]"]